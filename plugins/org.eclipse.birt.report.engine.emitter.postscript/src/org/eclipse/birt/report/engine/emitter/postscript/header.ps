%%Creator: Actuate Inc.
%%Pages: (atend)
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset FOPFonts
%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: procset FOPprocs
%%Title: Utility procedures
/getCurrentFont {
  currentfont dup
  /FontBBox known not{
    /FDepVector get 0 get
  }if
} def

/getFontHeight {
  0 getCurrentFont 
  /FontBBox get 3 get
  currentfont /FontMatrix get dtransform exch pop
} def

/getUnderline {
  currentpoint pop 7 1 roll awidthshow currentpoint pop
  sub 0 getCurrentFont dup
  /FontInfo get /UnderlineThickness get
  exch /FontMatrix get dtransform setlinewidth
  0 getCurrentFont dup
  /FontInfo get /UnderlinePosition get
  exch /FontMatrix get dtransform
} def
/mshow {
  /fontheight getFontHeight def
  0 fontheight -1 mul rmoveto
  getUnderline gsave
  /y1 exch def
  /x1 exch def
  /y2 exch def
  /x2 exch def
  1 eq {underline}if
  1 eq {linethrough}if
  1 eq {overline}if
grestore
} def

/linethrough {
  gsave
  x1 y1 fontheight 2 div add rmoveto
  x2 y2 rlineto stroke
  grestore
} def

/overline{
  gsave
  x1 y1 fontheight add rmoveto
  x2 y2 rlineto stroke
  grestore
} def

/underline{
  gsave
  x1 y1 rmoveto
  x2 y2 rlineto stroke
  grestore
} def
/pix 3 string def
% define space for color conversions
/grays 1 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def
% define 'colorimage' if it isn't defined
% ('colortogray' and 'mergeprocs' come from xwd2ps
% via xgrab)
/colorimage where {
  pop
}{
  /colortogray {  % define an RGB->I function
    /rgbdata exch store    % call input 'rgbdata'
    rgbdata length 3 idiv
    /npixls exch store
    /rgbindx 0 store
    0 1 npixls 1 sub {
      grays exch
      rgbdata rgbindx       get 20 mul    % Red
      rgbdata rgbindx 1 add get 32 mul    % Green
      rgbdata rgbindx 2 add get 12 mul    % Blue
      add add 64 idiv      % I = .5G + .31R + .18B
      put
      /rgbindx rgbindx 3 add store
    } for
    grays 0 npixls getinterval
  } bind def

% Utility procedure for colorimage operator.
% This procedure takes two procedures off the
% stack and merges them into a single procedure.
  /mergeprocs { % def
    dup length
    3 -1 roll
    dup
    length
    dup
    5 1 roll
    3 -1 roll
    add
    array cvx
    dup
    3 -1 roll
    0 exch
    putinterval
    dup
    4 2 roll
    putinterval
  } bind def

  /colorimage { % def
    pop pop     % remove 'false 3' operands
    {colortogray} mergeprocs
    image
  } bind def
} ifelse          % end of 'false' case

% Define a serial number for creating unique XUIDs for TrueType fonts.
% We used to use the checkSumAdjustment value from the font, but this is
% not reliable, since some fonts don't set it correctly.
% Note that we must do this in a string to make it immune to save/restore.
/xuidstring <80000000> def
/curxuid {		% - curxuid <int>
  0 xuidstring { exch 8 bitshift exch add } forall
} bind def
/nextxuid {		% - nextxuid -
  3 -1 0 {
    xuidstring 1 index 2 copy get dup 255 ne {
      1 add put pop exit
    } if pop 0 put pop
  } for
} bind def

/AddT42Char
{
  /CIDFont findresource
  dup
  /GlyphDirectory get
	begin
	  2 index
	  4 2 roll
	  def
	end
	exch /CIDMap get 3 1 roll put
} def

/CIDInit /ProcSet findresource begin
  10 dict begin
    begincmap
      /CIDSystemInfo 3 dict dup begin
        /Registry(Actuate)def
        /Ordering(Engine)def
        /Supplement 0 def
      end def
      /CMapType 0 def
      /WMode 0 def
      1 begincodespacerange
        <0000><ffff>
      endcodespacerange
      1 begincidrange
        <0000><ffff> 0
      endcidrange
    endcmap
    /PeerCMap currentdict /CMap defineresource
    pop
  end
end

%%EndResource
%%EndSetup
